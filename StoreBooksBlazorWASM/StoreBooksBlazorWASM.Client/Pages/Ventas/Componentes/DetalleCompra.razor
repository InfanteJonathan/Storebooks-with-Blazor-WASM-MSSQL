@* @using SoreBooksBlazorWASM.Service
@using StoreBooksBlazorWASM.Data
@inject VentasService _service
@inject LibroService _serviceL
@inject IServiceProvider ServiceProvider


<h3>DetalleCompra</h3>


<div>
    @foreach (var item in lista)
    {
        <div class="row">
            <div>
                <label>Producto: @item.Titulo </label>
                <label>Cantidad: @item.Cantidad </label>
                <label>Precio/Unidad: @item.PrecioUnitario </label>
                <label>Total Producto: @item.TotalVenta </label>
            </div>            
            <div>
                <img src="@item.ImgLibro" />
            </div>
            <div>
                <button @onclick="() =>Agregar(item.IdLibro)"></button>
                <button @onclick="() => Eliminar(item.IdDetalleVentas)"></button>
            </div>

        </div>
    }

</div>
@code {
    List<VentaGeneral> lista = new();
    string message = string.Empty;
    bool exito = false;

    protected override async Task OnInitializedAsync()
    {
        var authService = ServiceProvider.GetRequiredService<CustomAuthenticationService>();
        var usuarioActual = await authService.GetCurrentUserAsync();
        await LlamarDetalles(usuarioActual);
    }
    
    async Task LlamarDetalles(ApplicationUser usuarioActual)
    {
        lista = await _service.detalleGeneral(usuarioActual);
    }

    async Task Agregar(int id)
    {
        var buscarLibro = await _serviceL.obtenerLibro(id);
        await _service.CrearDetalleVenta(buscarLibro);
        StateHasChanged();
    }
    async Task Eliminar(int id)
    {
        var response = await _service.EliminarDetalleVenta(id);
        message = response.Mensaje;
        exito = response.Exito;
        StateHasChanged();

    }

}
 *@