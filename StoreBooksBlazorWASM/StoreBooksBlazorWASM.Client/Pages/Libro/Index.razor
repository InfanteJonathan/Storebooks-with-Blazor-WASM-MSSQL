@page "/libros"
@inject LibroService _service
@inject UsuarioServicio _servicioU
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))



<PageTitle>Lista</PageTitle>

<Notification Message="@message" IsSuccess="@exito" />
<br />
<h3>Catalogo de Libros</h3>
<br />

<Crear OnDatoCreado="OnLibroCreado"/>

<br />
@if (libros == null)
{
    <p><em>Loading...</em></p>
}
else
{
    

    <Table FixedHeader FixedHeaderTableHeight="400px">
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Id</TableHeaderCell>
                <TableHeaderCell>Titulo</TableHeaderCell>
                <TableHeaderCell>Autor</TableHeaderCell>
                <TableHeaderCell>Precio</TableHeaderCell>
                <TableHeaderCell>Categoria</TableHeaderCell>
                <TableHeaderCell>Cantidad</TableHeaderCell>
                <TableHeaderCell>Fecha Publicacion</TableHeaderCell>
                <TableHeaderCell>Acciones</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach(var item in libros)
            {

                <TableRow >
                    <TableRowHeader>@item.IdLibro</TableRowHeader>
                    <TableRowCell>@item.Titulo</TableRowCell>
                    <TableRowCell>@item.Autor</TableRowCell>
                    <TableRowCell>@item.Precio</TableRowCell>
                    <TableRowCell>@item.Categoria</TableRowCell>
                    <TableRowCell>@item.Cantidad</TableRowCell>
                    <TableRowCell>@item.FechaPublicacion</TableRowCell>
                    <TableRowCell>
                        <Editar id="@item.IdLibro" OnDatoEditado="OnLibroEditado" />
                        <Button Color="Color.Secondary" @onclick="() => Detalles(item.IdLibro)">Detalles</Button>
                        <Button Color="Color.Danger" @onclick="() => Eliminar(item.IdLibro)" >Eliminar</Button>
                        
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>

}


@code {

    List<LibroViewModel> libros = new();
    string message = string.Empty;
    bool exito = false;

    async Task CargarLibros()
    {
        libros = await _service.ListaLibros();
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarLibros();

    }

    protected override async Task OnParametersSetAsync()
    {
        await CargarLibros();
    }

    async Task OnLibroCreado(bool fueExitoso)
    {
        exito = fueExitoso;
        message = exito ? "Libro Registrado con exito" : "No se pudo registrar el libro";
        await CargarLibros();
    }

    async Task OnLibroEditado(bool fueExitoso)
    {
        exito = fueExitoso;
        message = exito ? "Registro editado correctamente" : "No se pudo editar el libro";
        await CargarLibros();
    }

    async Task Editar(int id)
    {
        _navigate.NavigateTo($"/editar/{id}");
    }

    async Task Detalles(int id)
    {
        _navigate.NavigateTo($"/detalle/{id}");
    }
    async Task Eliminar(int id)
    {
        var response = await _service.Eliminar(id);
        exito = response.Exito;
        message = response.Mensaje;
        await CargarLibros();
    }

}
