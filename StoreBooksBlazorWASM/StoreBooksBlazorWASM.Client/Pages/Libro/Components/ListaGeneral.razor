@inject LibroService _service
@inject VentasService _serviceL
@inject UsuarioServicio _serviceU
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))



<h1>Últimos Libros Agregados</h1>

<Toast Message="@messageToast" Show="@showToast" Exito="@exito"></Toast>

@if (!isDataLoaded)
{
    <p><em>Loading...</em></p>
}
else if (libros != null)
{
    <div class="image-container">
        @foreach (var item in libros)
        {
            <div>
                <div class="image-item">
                    <img @onclick='() => _navigate.NavigateTo($"/detalle/{item.IdLibro}")' style="cursor:default;" src="@item.Imagen" alt="Imagen" />
                </div>
                <div>Titulo: @item.Titulo</div>
                <div>Precio: @item.Precio</div>
                <div>
                    <button class="btn btn-primary" @onclick="() => Agregar(item.IdLibro)">Agregar</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p><em>No se encontraron libros.</em></p>
}

@code {
    List<LibroViewModel> libros = new List<LibroViewModel>();
    private string messageToast = string.Empty;
    private bool showToast = false;
    bool exito = false;
    List<UserViewModel> usuarios = new();
    bool isDataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var librosTask = _service.ListaLibros();

            libros = await librosTask;

            
        }
        catch (Exception ex)
        {
            messageToast = $"Error al cargar datos: {ex.Message}";
            await ShowToast();
        }
        finally
        {
            isDataLoaded = true;
        }
    }

    async Task CargarLibro()
    {
        libros = await _service.ListaLibros();
    }

    private async Task<string> getUserId()
    {
        return await _serviceU.ObtenerUsuarioActualAsync();
    }

    async Task Agregar(int id)
    {
        var libro = libros.FirstOrDefault(l => l.IdLibro == id);
        var userId = await getUserId();

        if (libro == null)
        {
            libro = await _service.obtenerLibro(id);
        }

        if (string.IsNullOrEmpty(userId))
        {
            messageToast = "Debe Registrarse y/o Iniciar Sesión para poder agregar productos";
            await ShowToast();
        }
        else
        {
            var response = await _serviceL.CrearDetalleVenta(libro, userId);
            exito = response.Exito;
            messageToast = response.Mensaje;
            await ShowToast();
        }
    }


    public async Task ShowToast()
    {
        showToast = true;
        StateHasChanged(); // Asegura que el estado se actualice
        await Task.Delay(3000); // Usa Task.Delay en lugar de `Task.Delay().ContinueWith()`
        showToast = false;
        StateHasChanged(); // Asegura que el estado se actualice
    }

}
